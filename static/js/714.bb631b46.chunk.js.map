{"version":3,"file":"static/js/714.bb631b46.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/util/set.js","../node_modules/langchain/dist/chains/sequential_chain.js"],"sourcesContent":["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nexport function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nexport function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nexport function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n","import { BaseChain } from \"./base.js\";\nimport { intersection, union, difference } from \"../util/set.js\";\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n * @example\n * ```typescript\n * const promptTemplate = new PromptTemplate({\n *   template: `You are a playwright. Given the title of play and the era it is set in, it is your job to write a synopsis for that title.\n * Title: {title}\n * Era: {era}\n * Playwright: This is a synopsis for the above play:`,\n *   inputVariables: [\"title\", \"era\"],\n * });\n\n * const reviewPromptTemplate = new PromptTemplate({\n *   template: `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n *     Play Synopsis:\n *     {synopsis}\n *     Review from a New York Times play critic of the above play:`,\n *   inputVariables: [\"synopsis\"],\n * });\n\n * const overallChain = new SequentialChain({\n *   chains: [\n *     new LLMChain({\n *       llm: new ChatOpenAI({ temperature: 0 }),\n *       prompt: promptTemplate,\n *       outputKey: \"synopsis\",\n *     }),\n *     new LLMChain({\n *       llm: new OpenAI({ temperature: 0 }),\n *       prompt: reviewPromptTemplate,\n *       outputKey: \"review\",\n *     }),\n *   ],\n *   inputVariables: [\"era\", \"title\"],\n *   outputVariables: [\"synopsis\", \"review\"],\n *   verbose: true,\n * });\n\n * const chainExecutionResult = await overallChain.call({\n *   title: \"Tragedy at sunset on the beach\",\n *   era: \"Victorian England\",\n * });\n * console.log(chainExecutionResult);\n * ```\n *\n * @deprecated\n * Switch to {@link https://js.langchain.com/docs/expression_language/ | expression language}.\n * Will be removed in 0.2.0\n */\nexport class SequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SequentialChain\";\n    }\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = intersection(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = union(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            let missingKeys = difference(new Set(chain.inputKeys), availableKeys);\n            if (chain.memory) {\n                missingKeys = difference(missingKeys, new Set(chain.memory.memoryKeys));\n            }\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappingOutputKeys = intersection(availableKeys, outputKeysSet);\n            if (overlappingOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappingOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = difference(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = difference(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = {};\n        const allChainValues = values;\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = await chain.call(allChainValues, runManager?.getChild(`step_${i}`));\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * @deprecated Switch to expression language: https://js.langchain.com/docs/expression_language/\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport class SimpleSequentialChain extends BaseChain {\n    static lc_name() {\n        return \"SimpleSequentialChain\";\n    }\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.filter((k) => !chain.memory?.memoryKeys.includes(k) ?? true).length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        let i = 0;\n        for (const chain of this.chains) {\n            i += 1;\n            input = (await chain.call({ [chain.inputKeys[0]]: input, signal: values.signal }, runManager?.getChild(`step_${i}`)))[chain.outputKeys[0]];\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n"],"names":["intersection","setA","setB","_step","_intersection","Set","_iterator","_createForOfIteratorHelper","s","n","done","elem","value","has","add","err","e","f","difference","_step3","_difference","_iterator3","delete","formatSet","input","Array","from","map","i","concat","join","SequentialChain","_BaseChain","_inherits","_super","_createSuper","fields","_fields$outputVariabl","_fields$returnAll","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","enumerable","configurable","writable","chains","inputVariables","outputVariables","length","returnAll","Error","_validateChains","_createClass","key","get","this","_this$memory$memoryKe","_this$memory","memoryKeys","memory","inputKeysSet","inputKeys","memoryKeysSet","keysIntersection","size","availableKeys","_step2","_union","_iterator2","union","chain","missingKeys","_chainType","outputKeysSet","outputKeys","overlappingOutputKeys","outputKey","_call2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","runManager","allChainValues","_i","_Object$keys","output","_iterator4","_step4","_key","wrap","_context","prev","next","getChild","sent","keys","t0","finish","abrupt","stop","_x","_x2","apply","arguments","_step5","_iterator5","push","serialize","_type","input_variables","output_variables","_deserialize","_callee2","data","serializedChains","_iterator6","_step6","serializedChain","deserializedChain","_context2","BaseChain","_x3","SimpleSequentialChain","_BaseChain2","_super2","_fields$trimOutputs","_this2","trimOutputs","inputKey","_step7","_iterator7","_loop","filter","k","_chain$memory$memoryK","_chain$memory","includes","_call3","_callee3","_iterator8","_step8","_chain$call","_context3","_defineProperty","signal","trim","handleText","t1","_x4","_x5","_step9","_iterator9","_deserialize2","_callee4","_iterator10","_step10","_context4","_x6"],"sourceRoot":""}