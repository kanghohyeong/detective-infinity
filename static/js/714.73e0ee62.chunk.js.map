{"version":3,"file":"static/js/714.73e0ee62.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/util/set.js","../node_modules/langchain/dist/chains/sequential_chain.js"],"sourcesContent":["/**\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations\n */\n/**\n * returns intersection of two sets\n */\nexport function intersection(setA, setB) {\n    const _intersection = new Set();\n    for (const elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n/**\n * returns union of two sets\n */\nexport function union(setA, setB) {\n    const _union = new Set(setA);\n    for (const elem of setB) {\n        _union.add(elem);\n    }\n    return _union;\n}\n/**\n * returns difference of two sets\n */\nexport function difference(setA, setB) {\n    const _difference = new Set(setA);\n    for (const elem of setB) {\n        _difference.delete(elem);\n    }\n    return _difference;\n}\n","import { BaseChain } from \"./base.js\";\nimport { intersection, union, difference } from \"../util/set.js\";\nfunction formatSet(input) {\n    return Array.from(input)\n        .map((i) => `\"${i}\"`)\n        .join(\", \");\n}\n/**\n * Chain where the outputs of one chain feed directly into next.\n */\nexport class SequentialChain extends BaseChain {\n    get inputKeys() {\n        return this.inputVariables;\n    }\n    get outputKeys() {\n        return this.outputVariables;\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"outputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"returnAll\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.inputVariables = fields.inputVariables;\n        this.outputVariables = fields.outputVariables ?? [];\n        if (this.outputVariables.length > 0 && fields.returnAll) {\n            throw new Error(\"Either specify variables to return using `outputVariables` or use `returnAll` param. Cannot apply both conditions at the same time.\");\n        }\n        this.returnAll = fields.returnAll ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        if (this.chains.length === 0) {\n            throw new Error(\"Sequential chain must have at least one chain.\");\n        }\n        const memoryKeys = this.memory?.memoryKeys ?? [];\n        const inputKeysSet = new Set(this.inputKeys);\n        const memoryKeysSet = new Set(memoryKeys);\n        const keysIntersection = intersection(inputKeysSet, memoryKeysSet);\n        if (keysIntersection.size > 0) {\n            throw new Error(`The following keys: ${formatSet(keysIntersection)} are overlapping between memory and input keys of the chain variables. This can lead to unexpected behaviour. Please use input and memory keys that don't overlap.`);\n        }\n        const availableKeys = union(inputKeysSet, memoryKeysSet);\n        for (const chain of this.chains) {\n            const missingKeys = difference(new Set(chain.inputKeys), availableKeys);\n            if (missingKeys.size > 0) {\n                throw new Error(`Missing variables for chain \"${chain._chainType()}\": ${formatSet(missingKeys)}. Only got the following variables: ${formatSet(availableKeys)}.`);\n            }\n            const outputKeysSet = new Set(chain.outputKeys);\n            const overlappinOutputKeys = intersection(availableKeys, outputKeysSet);\n            if (overlappinOutputKeys.size > 0) {\n                throw new Error(`The following output variables for chain \"${chain._chainType()}\" are overlapping: ${formatSet(overlappinOutputKeys)}. This can lead to unexpected behaviour.`);\n            }\n            for (const outputKey of outputKeysSet) {\n                availableKeys.add(outputKey);\n            }\n        }\n        if (this.outputVariables.length === 0) {\n            if (this.returnAll) {\n                const outputKeys = difference(availableKeys, inputKeysSet);\n                this.outputVariables = Array.from(outputKeys);\n            }\n            else {\n                this.outputVariables = this.chains[this.chains.length - 1].outputKeys;\n            }\n        }\n        else {\n            const missingKeys = difference(new Set(this.outputVariables), new Set(availableKeys));\n            if (missingKeys.size > 0) {\n                throw new Error(`The following output variables were expected to be in the final chain output but were not found: ${formatSet(missingKeys)}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values;\n        const allChainValues = {};\n        for (const chain of this.chains) {\n            input = await chain.call(input, runManager?.getChild());\n            for (const key of Object.keys(input)) {\n                allChainValues[key] = input[key];\n            }\n        }\n        const output = {};\n        for (const key of this.outputVariables) {\n            output[key] = allChainValues[key];\n        }\n        return output;\n    }\n    _chainType() {\n        return \"sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const inputVariables = data.input_variables;\n        const outputVariables = data.output_variables;\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SequentialChain({ chains, inputVariables, outputVariables });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            input_variables: this.inputVariables,\n            output_variables: this.outputVariables,\n            chains,\n        };\n    }\n}\n/**\n * Simple chain where a single string output of one chain is fed directly into the next.\n * @augments BaseChain\n * @augments SimpleSequentialChainInput\n *\n * @example\n * ```ts\n * import { SimpleSequentialChain, LLMChain } from \"langchain/chains\";\n * import { OpenAI } from \"langchain/llms/openai\";\n * import { PromptTemplate } from \"langchain/prompts\";\n *\n * // This is an LLMChain to write a synopsis given a title of a play.\n * const llm = new OpenAI({ temperature: 0 });\n * const template = `You are a playwright. Given the title of play, it is your job to write a synopsis for that title.\n *\n * Title: {title}\n * Playwright: This is a synopsis for the above play:`\n * const promptTemplate = new PromptTemplate({ template, inputVariables: [\"title\"] });\n * const synopsisChain = new LLMChain({ llm, prompt: promptTemplate });\n *\n *\n * // This is an LLMChain to write a review of a play given a synopsis.\n * const reviewLLM = new OpenAI({ temperature: 0 })\n * const reviewTemplate = `You are a play critic from the New York Times. Given the synopsis of play, it is your job to write a review for that play.\n *\n * Play Synopsis:\n * {synopsis}\n * Review from a New York Times play critic of the above play:`\n * const reviewPromptTemplate = new PromptTemplate({ template: reviewTemplate, inputVariables: [\"synopsis\"] });\n * const reviewChain = new LLMChain({ llm: reviewLLM, prompt: reviewPromptTemplate });\n *\n * const overallChain = new SimpleSequentialChain({chains: [synopsisChain, reviewChain], verbose:true})\n * const review = await overallChain.run(\"Tragedy at sunset on the beach\")\n * // the variable review contains resulting play review.\n * ```\n */\nexport class SimpleSequentialChain extends BaseChain {\n    get inputKeys() {\n        return [this.inputKey];\n    }\n    get outputKeys() {\n        return [this.outputKey];\n    }\n    constructor(fields) {\n        super(fields.memory, fields.verbose, fields.callbacks ?? fields.callbackManager);\n        Object.defineProperty(this, \"chains\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"inputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"input\"\n        });\n        Object.defineProperty(this, \"outputKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"output\"\n        });\n        Object.defineProperty(this, \"trimOutputs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.chains = fields.chains;\n        this.trimOutputs = fields.trimOutputs ?? false;\n        this._validateChains();\n    }\n    /** @ignore */\n    _validateChains() {\n        for (const chain of this.chains) {\n            if (chain.inputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one input, got ${chain.inputKeys.length} for ${chain._chainType()}.`);\n            }\n            if (chain.outputKeys.length !== 1) {\n                throw new Error(`Chains used in SimpleSequentialChain should all have one output, got ${chain.outputKeys.length} for ${chain._chainType()}.`);\n            }\n        }\n    }\n    /** @ignore */\n    async _call(values, runManager) {\n        let input = values[this.inputKey];\n        for (const chain of this.chains) {\n            input = await chain.run(input, runManager?.getChild());\n            if (this.trimOutputs) {\n                input = input.trim();\n            }\n            await runManager?.handleText(input);\n        }\n        return { [this.outputKey]: input };\n    }\n    _chainType() {\n        return \"simple_sequential_chain\";\n    }\n    static async deserialize(data) {\n        const chains = [];\n        const serializedChains = data.chains;\n        for (const serializedChain of serializedChains) {\n            const deserializedChain = await BaseChain.deserialize(serializedChain);\n            chains.push(deserializedChain);\n        }\n        return new SimpleSequentialChain({ chains });\n    }\n    serialize() {\n        const chains = [];\n        for (const chain of this.chains) {\n            chains.push(chain.serialize());\n        }\n        return {\n            _type: this._chainType(),\n            chains,\n        };\n    }\n}\n"],"names":["intersection","setA","setB","_step","_intersection","Set","_iterator","_createForOfIteratorHelper","s","n","done","elem","value","has","add","err","e","f","difference","_step3","_difference","_iterator3","delete","formatSet","input","Array","from","map","i","concat","join","SequentialChain","_BaseChain","_inherits","_super","_createSuper","fields","_fields$outputVariabl","_fields$returnAll","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","enumerable","configurable","writable","chains","inputVariables","outputVariables","length","returnAll","Error","_validateChains","_createClass","key","get","this","_this$memory$memoryKe","_this$memory","memoryKeys","memory","inputKeysSet","inputKeys","memoryKeysSet","keysIntersection","size","availableKeys","_step2","_union","_iterator2","union","chain","missingKeys","_chainType","outputKeysSet","outputKeys","overlappinOutputKeys","outputKey","_call2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","values","runManager","allChainValues","_i","_Object$keys","output","_iterator4","_step4","_key","wrap","_context","prev","next","getChild","sent","keys","t0","finish","abrupt","stop","_x","_x2","apply","arguments","_step5","_iterator5","push","serialize","_type","input_variables","output_variables","_deserialize","_callee2","data","serializedChains","_iterator6","_step6","serializedChain","deserializedChain","_context2","BaseChain","_x3","SimpleSequentialChain","_BaseChain2","_super2","_fields$callbacks","_fields$trimOutputs","_this2","verbose","callbacks","callbackManager","trimOutputs","inputKey","_step7","_iterator7","_call3","_callee3","_iterator8","_step8","_context3","run","trim","handleText","_defineProperty","_x4","_x5","_step9","_iterator9","_deserialize2","_callee4","_iterator10","_step10","_context4","_x6"],"sourceRoot":""}