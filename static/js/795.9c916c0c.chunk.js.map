{"version":3,"file":"static/js/795.9c916c0c.chunk.js","mappings":"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","sources":["../node_modules/langchain/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate, } from \"./base.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const promptDict = { ...this };\n        promptDict.inputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        promptDict.partialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n"],"names":["FewShotPromptTemplate","_BaseStringPromptTemp","_inherits","_super","_createSuper","input","_this","_classCallCheck","call","Object","defineProperty","_assertThisInitialized","enumerable","configurable","writable","value","assign","undefined","examples","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","checkValidTemplate","prefix","suffix","templateFormat","_createClass","key","_getExamples","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","this","abrupt","selectExamples","stop","_x","apply","arguments","_partial","_callee2","values","_this$partialVariable","promptDict","_context2","_objectSpread","filter","iv","_x2","_format","_callee3","allValues","exampleStrings","template","_this2","_context3","mergePartialAndUserVariables","sent","getExamples","Promise","all","map","example","examplePrompt","format","_toConsumableArray","join","exampleSeparator","renderTemplate","_x3","outputParser","_type","_getPromptType","input_variables","example_prompt","serialize","example_separator","template_format","_deserialize","_callee4","data","_context4","PromptTemplate","Array","isArray","_x4","BaseStringPromptTemplate"],"sourceRoot":""}